/* tslint:disable */
/* eslint-disable */
/**
 * ClassIsland.ManagementServer.Server - version 1.0
 *
 *
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type Setting = {
  id?: string;
  name?: string | null;
  description?: string | null;
  settings?: string | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ObjectTypes = 0 | 1 | 2 | 3 | 4 | 5;
export type AssigneeTypes = 0 | 1 | 2 | 3;
export type ObjectsAssignee = {
  id?: number;
  objectId?: string;
  objectType?: ObjectTypes;
  targetClientId?: string | null;
  targetClientCuid?: string | null;
  targetGroupId?: number | null;
  assigneeType?: AssigneeTypes;
  createdTime?: string;
  updatedTime?: string;
};
export type RegisterRequest = {
  email?: string | null;
  password?: string | null;
};
export type AccessTokenResponse = {
  tokenType?: string | null;
  accessToken?: string | null;
  expiresIn?: number;
  refreshToken?: string | null;
};
export type LoginRequest = {
  email?: string | null;
  password?: string | null;
  twoFactorCode?: string | null;
  twoFactorRecoveryCode?: string | null;
};
export type RefreshRequest = {
  refreshToken?: string | null;
};
export type ResendConfirmationEmailRequest = {
  email?: string | null;
};
export type ForgotPasswordRequest = {
  email?: string | null;
};
export type ResetPasswordRequest = {
  email?: string | null;
  resetCode?: string | null;
  newPassword?: string | null;
};
export type TwoFactorResponse = {
  sharedKey?: string | null;
  recoveryCodesLeft?: number;
  recoveryCodes?: string[] | null;
  isTwoFactorEnabled?: boolean;
  isMachineRemembered?: boolean;
};
export type TwoFactorRequest = {
  enable?: boolean | null;
  twoFactorCode?: string | null;
  resetSharedKey?: boolean;
  resetRecoveryCodes?: boolean;
  forgetMachine?: boolean;
};
export type InfoResponse = {
  email?: string | null;
  isEmailConfirmed?: boolean;
};
export type InfoRequest = {
  newEmail?: string | null;
  newPassword?: string | null;
  oldPassword?: string | null;
};
export type TimeRule = {
  isActive?: boolean;
  weekDay?: number;
  weekCountDiv?: number;
};
export type ClassInfo = {
  isActive?: boolean;
  subjectId?: string | null;
};
export type ClassPlan = {
  isActive?: boolean;
  attachedObjects?: Record<string, unknown | null> | null;
  timeLayoutId?: string | null;
  timeRule?: TimeRule;
  classes?: ClassInfo[] | null;
  name?: string | null;
  isOverlay?: boolean;
  overlaySourceId?: string | null;
  overlaySetupTime?: string;
  isEnabled?: boolean;
  associatedGroup?: string | null;
};
export type CommandTypes = 0 | 1 | 2 | 3 | 4 | 5 | 6;
export type SendNotification = {
  messageMask?: string | null;
  messageContent?: string | null;
  overlayIconLeft?: number;
  overlayIconRight?: number;
  isEmergency?: boolean;
  isSpeechEnabled?: boolean;
  isEffectEnabled?: boolean;
  isSoundEnabled?: boolean;
  isTopmost?: boolean;
  durationSeconds?: number;
  repeatCounts?: number;
};
export type SendNotificationRequest = {
  targets?: ObjectsAssignee[] | null;
  type?: CommandTypes;
  payload?: SendNotification;
};
export type RestartAppRequest = {
  targets?: ObjectsAssignee[] | null;
  type?: CommandTypes;
};
export type ObjectUpdate = {
  id?: number;
  objectId?: string;
  objectType?: ObjectTypes;
  targetCuid?: string;
  updateTime?: string;
};
export type Client = {
  cuid?: string;
  id?: string | null;
  registerTime?: string;
  policyVersion?: number;
  timeLayoutVersion?: number;
  subjectsVersion?: number;
  defaultSettingsVersion?: number;
  classPlanVersion?: number;
  objectUpdates?: ObjectUpdate[] | null;
  createdTime?: string;
  updatedTime?: string;
  abstractClient?: AbstractClient;
};
export type AbstractClient = {
  internalId?: number;
  id?: string | null;
  createdTime?: string;
  updatedTime?: string;
  groupId?: number;
  clients?: Client[] | null;
  group?: ClientGroup;
};
export type ClientGroup = {
  id?: number;
  name?: string | null;
  clients?: AbstractClient[] | null;
  objectsAssignees?: ObjectsAssignee[] | null;
  createdTime?: string;
  updatedTime?: string;
  colorHex?: string | null;
};
export type ManagementPolicy = {
  isActive?: boolean;
  disableProfileClassPlanEditing?: boolean;
  disableProfileTimeLayoutEditing?: boolean;
  disableProfileSubjectsEditing?: boolean;
  disableProfileEditing?: boolean;
  disableSettingsEditing?: boolean;
  disableSplashCustomize?: boolean;
  disableDebugMenu?: boolean;
  allowExitManagement?: boolean;
};
export type Policy = {
  id?: string;
  name?: string | null;
  isEnabled?: boolean;
  content?: ManagementPolicy;
  createdTime?: string;
  updatedTime?: string;
};
export type TimeLayoutItem = {
  isActive?: boolean;
  attachedObjects?: Record<string, unknown | null> | null;
  startSecond?: string;
  endSecond?: string;
  timeType?: number;
  isHideDefault?: boolean;
  defaultClassId?: string | null;
};
export type TimeLayout = {
  isActive?: boolean;
  attachedObjects?: Record<string, unknown | null> | null;
  name?: string | null;
  layouts?: TimeLayoutItem[] | null;
};
export type Subject = {
  isActive?: boolean;
  attachedObjects?: Record<string, unknown | null> | null;
  name?: string | null;
  initial?: string | null;
  teacherName?: string | null;
  isOutDoor?: boolean;
};
export type ClassPlanGroup = {
  isActive?: boolean;
  name?: string | null;
  isGlobal?: boolean;
};
export type TempClassPlanGroupType = 0 | 1;
export type Profile = {
  isActive?: boolean;
  name?: string | null;
  timeLayouts?: Record<string, TimeLayout> | null;
  classPlans?: Record<string, ClassPlan> | null;
  subjects?: Record<string, Subject> | null;
  isOverlayClassPlanEnabled?: boolean;
  overlayClassPlanId?: string | null;
  tempClassPlanId?: string | null;
  tempClassPlanSetupTime?: string;
  classPlanGroups?: Record<string, ClassPlanGroup> | null;
  selectedClassPlanGroupId?: string | null;
  tempClassPlanGroupId?: string | null;
  tempClassPlanGroupExpireTime?: string;
  isTempClassPlanGroupEnabled?: boolean;
  tempClassPlanGroupType?: TempClassPlanGroupType;
};
export type TimeOnly = {
  hour?: number;
  minute?: number;
  second?: number;
  millisecond?: number;
  microsecond?: number;
  nanosecond?: number;
  ticks?: number;
};
export type ProfileTimeLayoutTimePoint = {
  internalId?: number;
  parentId?: string;
  index?: number;
  start?: TimeOnly;
  end?: TimeOnly;
  timeType?: number;
  defaultSubjectId?: string | null;
  isHideDefault?: boolean;
  parent?: ProfileTimeLayout;
  attachedObjects?: Record<string, unknown | null> | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ProfileTimeLayout = {
  id?: string;
  name?: string | null;
  groupId?: string | null;
  group?: ProfileGroup;
  profileClassPlans?: ProfileClassplan[] | null;
  profileTimelayoutTimepoints?: ProfileTimeLayoutTimePoint[] | null;
  attachedObjects?: Record<string, unknown | null> | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ProfileClassPlanClass = {
  internalId?: number;
  index?: number;
  parentId?: string;
  subjectId?: string;
  parent?: ProfileClassplan;
  subject?: ProfileSubject;
  attachedObjects?: Record<string, unknown | null> | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ProfileClassplan = {
  id?: string;
  name?: string | null;
  groupId?: string | null;
  weekDay?: number;
  weekDiv?: number;
  timeLayoutId?: string;
  isEnabled?: boolean;
  group?: ProfileGroup;
  profileClassPlanClasses?: ProfileClassPlanClass[] | null;
  timeLayout?: ProfileTimeLayout;
  attachedObjects?: Record<string, unknown | null> | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ProfileGroup = {
  id?: string;
  name?: string | null;
  description?: string | null;
  profileClassplans?: ProfileClassplan[] | null;
  profileSubjects?: ProfileSubject[] | null;
  profileTimelayouts?: ProfileTimeLayout[] | null;
  createdTime?: string;
  updatedTime?: string;
};
export type ProfileSubject = {
  id?: string;
  groupId?: string | null;
  name?: string | null;
  initials?: string | null;
  isOutDoor?: boolean;
  group?: ProfileGroup;
  profileClassplanClasses?: ProfileClassPlanClass[] | null;
  attachedObjects?: Record<string, unknown | null> | null;
  createdTime?: string;
  updatedTime?: string;
};
declare global {
  interface Apis {
    appsettings: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/default-settings
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_default_settings<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'appsettings.get_api_v1_default_settings', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/default-settings
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   name?: string | null
       *   description?: string | null
       *   settings?: string | null
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_default_settings<
        Config extends Alova2MethodConfig<unknown> & {
          data: Setting;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'appsettings.post_api_v1_default_settings', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/default-settings/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_default_settings_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'appsettings.get_api_v1_default_settings_id', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/default-settings/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   name?: string | null
       *   description?: string | null
       *   settings?: string | null
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_default_settings_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: Setting;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'appsettings.post_api_v1_default_settings_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/default-settings/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_default_settings_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'appsettings.delete_api_v1_default_settings_id', Config>;
    };
    assignees: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/assignees/all/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_assignees_all_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.get_api_v1_assignees_all_id', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/assignees/all/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   objectId?: string
       *   objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *   targetClientId?: string | null
       *   targetClientCuid?: string | null
       *   targetGroupId?: number | null
       *   assigneeType?: 0 | 1 | 2 | 3
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_assignees_all_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: ObjectsAssignee;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.post_api_v1_assignees_all_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/assignees/all/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_assignees_all_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.delete_api_v1_assignees_all_id', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/assignees/all
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   objectId?: string
       *   objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *   targetClientId?: string | null
       *   targetClientCuid?: string | null
       *   targetGroupId?: number | null
       *   assigneeType?: 0 | 1 | 2 | 3
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_assignees_all<
        Config extends Alova2MethodConfig<unknown> & {
          data: ObjectsAssignee;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.post_api_v1_assignees_all', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/assignees/by-object/assignees/{objectType}/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   objectType: number
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_assignees_by_object_assignees_objecttype_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            objectType: number;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.get_api_v1_assignees_by_object_assignees_objecttype_id', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/assignees/by-object/clients/{objectType}/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   objectType: number
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_assignees_by_object_clients_objecttype_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            objectType: number;
            /**
             * [required]
             */
            id: string;
          };
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'assignees.get_api_v1_assignees_by_object_clients_objecttype_id', Config>;
    };
    identity: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string | null
       *   password?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_identity_register<
        Config extends Alova2MethodConfig<unknown> & {
          data: RegisterRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'identity.post_api_v1_identity_register', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/login
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   useCookies?: boolean
       *   useSessionCookies?: boolean
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string | null
       *   password?: string | null
       *   twoFactorCode?: string | null
       *   twoFactorRecoveryCode?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   tokenType?: string | null
       *   accessToken?: string | null
       *   expiresIn?: number
       *   refreshToken?: string | null
       * }
       * ```
       */
      post_api_v1_identity_login<
        Config extends Alova2MethodConfig<AccessTokenResponse> & {
          params: {
            useCookies?: boolean;
            useSessionCookies?: boolean;
          };
          data: LoginRequest;
        }
      >(
        config: Config
      ): Alova2Method<AccessTokenResponse, 'identity.post_api_v1_identity_login', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/refresh
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   refreshToken?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   tokenType?: string | null
       *   accessToken?: string | null
       *   expiresIn?: number
       *   refreshToken?: string | null
       * }
       * ```
       */
      post_api_v1_identity_refresh<
        Config extends Alova2MethodConfig<AccessTokenResponse> & {
          data: RefreshRequest;
        }
      >(
        config: Config
      ): Alova2Method<AccessTokenResponse, 'identity.post_api_v1_identity_refresh', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/identity/confirmEmail
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   userId?: string
       *   code?: string
       *   changedEmail?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      mapidentityapiApiV1IdentityConfirmemail<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            userId?: string;
            code?: string;
            changedEmail?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'identity.mapidentityapiApiV1IdentityConfirmemail', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/resendConfirmationEmail
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_identity_resendconfirmationemail<
        Config extends Alova2MethodConfig<unknown> & {
          data: ResendConfirmationEmailRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'identity.post_api_v1_identity_resendconfirmationemail', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/forgotPassword
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_identity_forgotpassword<
        Config extends Alova2MethodConfig<unknown> & {
          data: ForgotPasswordRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'identity.post_api_v1_identity_forgotpassword', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/resetPassword
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   email?: string | null
       *   resetCode?: string | null
       *   newPassword?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_identity_resetpassword<
        Config extends Alova2MethodConfig<unknown> & {
          data: ResetPasswordRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'identity.post_api_v1_identity_resetpassword', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/manage/2fa
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   enable?: boolean | null
       *   twoFactorCode?: string | null
       *   resetSharedKey?: boolean
       *   resetRecoveryCodes?: boolean
       *   forgetMachine?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   sharedKey?: string | null
       *   recoveryCodesLeft?: number
       *   recoveryCodes?: string[] | null
       *   isTwoFactorEnabled?: boolean
       *   isMachineRemembered?: boolean
       * }
       * ```
       */
      post_api_v1_identity_manage_2fa<
        Config extends Alova2MethodConfig<TwoFactorResponse> & {
          data: TwoFactorRequest;
        }
      >(
        config: Config
      ): Alova2Method<TwoFactorResponse, 'identity.post_api_v1_identity_manage_2fa', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/identity/manage/info
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   email?: string | null
       *   isEmailConfirmed?: boolean
       * }
       * ```
       */
      get_api_v1_identity_manage_info<Config extends Alova2MethodConfig<InfoResponse>>(
        config?: Config
      ): Alova2Method<InfoResponse, 'identity.get_api_v1_identity_manage_info', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/identity/manage/info
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   newEmail?: string | null
       *   newPassword?: string | null
       *   oldPassword?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   email?: string | null
       *   isEmailConfirmed?: boolean
       * }
       * ```
       */
      post_api_v1_identity_manage_info<
        Config extends Alova2MethodConfig<InfoResponse> & {
          data: InfoRequest;
        }
      >(
        config: Config
      ): Alova2Method<InfoResponse, 'identity.post_api_v1_identity_manage_info', Config>;
    };
    classplans: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/profiles/classPlans
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_profiles_classplans<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'classplans.get_api_v1_profiles_classplans', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/classPlans
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   isActive?: boolean
       *   attachedObjects?: Record<string, unknown | null> | null
       *   timeLayoutId?: string | null
       *   timeRule?: {
       *     isActive?: boolean
       *     weekDay?: number
       *     weekCountDiv?: number
       *   }
       *   classes?: Array<{
       *     isActive?: boolean
       *     subjectId?: string | null
       *   }> | null
       *   name?: string | null
       *   isOverlay?: boolean
       *   overlaySourceId?: string | null
       *   overlaySetupTime?: string
       *   isEnabled?: boolean
       *   associatedGroup?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_classplans<
        Config extends Alova2MethodConfig<unknown> & {
          data: ClassPlan;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'classplans.put_api_v1_profiles_classplans', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/profiles/classPlans/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_profiles_classplans_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'classplans.get_api_v1_profiles_classplans_id', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/classPlans/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   isActive?: boolean
       *   attachedObjects?: Record<string, unknown | null> | null
       *   timeLayoutId?: string | null
       *   timeRule?: {
       *     isActive?: boolean
       *     weekDay?: number
       *     weekCountDiv?: number
       *   }
       *   classes?: Array<{
       *     isActive?: boolean
       *     subjectId?: string | null
       *   }> | null
       *   name?: string | null
       *   isOverlay?: boolean
       *   overlaySourceId?: string | null
       *   overlaySetupTime?: string
       *   isEnabled?: boolean
       *   associatedGroup?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_classplans_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: ClassPlan;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'classplans.put_api_v1_profiles_classplans_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/profiles/classPlans/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_profiles_classplans_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'classplans.delete_api_v1_profiles_classplans_id', Config>;
    };
    clientcommanddeliver: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/client-commands/show-notification
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   targets?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetClientId?: string | null
       *     targetClientCuid?: string | null
       *     targetGroupId?: number | null
       *     assigneeType?: 0 | 1 | 2 | 3
       *     createdTime?: string
       *     updatedTime?: string
       *   }> | null
       *   type?: 0 | 1 | 2 | 3 | 4 | 5 | 6
       *   payload?: {
       *     messageMask?: string | null
       *     messageContent?: string | null
       *     overlayIconLeft?: number
       *     overlayIconRight?: number
       *     isEmergency?: boolean
       *     isSpeechEnabled?: boolean
       *     isEffectEnabled?: boolean
       *     isSoundEnabled?: boolean
       *     isTopmost?: boolean
       *     durationSeconds?: number
       *     repeatCounts?: number
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_client_commands_show_notification<
        Config extends Alova2MethodConfig<unknown> & {
          data: SendNotificationRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientcommanddeliver.post_api_v1_client_commands_show_notification', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/client-commands/restart-app
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   targets?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetClientId?: string | null
       *     targetClientCuid?: string | null
       *     targetGroupId?: number | null
       *     assigneeType?: 0 | 1 | 2 | 3
       *     createdTime?: string
       *     updatedTime?: string
       *   }> | null
       *   type?: 0 | 1 | 2 | 3 | 4 | 5 | 6
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_client_commands_restart_app<
        Config extends Alova2MethodConfig<unknown> & {
          data: RestartAppRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientcommanddeliver.post_api_v1_client_commands_restart_app', Config>;
    };
    clientgroup: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client_groups
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_groups<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientgroup.get_api_v1_client_groups', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/client_groups
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   name?: string | null
       *   clients?: Array<{
       *     internalId?: number
       *     id?: string | null
       *     createdTime?: string
       *     updatedTime?: string
       *     groupId?: number
       *     clients?: Array<{
       *       cuid?: string
       *       id?: string | null
       *       registerTime?: string
       *       policyVersion?: number
       *       timeLayoutVersion?: number
       *       subjectsVersion?: number
       *       defaultSettingsVersion?: number
       *       classPlanVersion?: number
       *       objectUpdates?: Array<{
       *         id?: number
       *         objectId?: string
       *         objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *         targetCuid?: string
       *         updateTime?: string
       *       }> | null
       *       createdTime?: string
       *       updatedTime?: string
       *       abstractClient?: AbstractClient
       *     }> | null
       *     group?: ClientGroup
       *   }> | null
       *   objectsAssignees?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetClientId?: string | null
       *     targetClientCuid?: string | null
       *     targetGroupId?: number | null
       *     assigneeType?: 0 | 1 | 2 | 3
       *     createdTime?: string
       *     updatedTime?: string
       *   }> | null
       *   createdTime?: string
       *   updatedTime?: string
       *   colorHex?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_client_groups<
        Config extends Alova2MethodConfig<unknown> & {
          data: ClientGroup;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientgroup.put_api_v1_client_groups', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client_groups/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_groups_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientgroup.get_api_v1_client_groups_id', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/client_groups/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: number
       *   name?: string | null
       *   clients?: Array<{
       *     internalId?: number
       *     id?: string | null
       *     createdTime?: string
       *     updatedTime?: string
       *     groupId?: number
       *     clients?: Array<{
       *       cuid?: string
       *       id?: string | null
       *       registerTime?: string
       *       policyVersion?: number
       *       timeLayoutVersion?: number
       *       subjectsVersion?: number
       *       defaultSettingsVersion?: number
       *       classPlanVersion?: number
       *       objectUpdates?: Array<{
       *         id?: number
       *         objectId?: string
       *         objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *         targetCuid?: string
       *         updateTime?: string
       *       }> | null
       *       createdTime?: string
       *       updatedTime?: string
       *       abstractClient?: AbstractClient
       *     }> | null
       *     group?: ClientGroup
       *   }> | null
       *   objectsAssignees?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetClientId?: string | null
       *     targetClientCuid?: string | null
       *     targetGroupId?: number | null
       *     assigneeType?: 0 | 1 | 2 | 3
       *     createdTime?: string
       *     updatedTime?: string
       *   }> | null
       *   createdTime?: string
       *   updatedTime?: string
       *   colorHex?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_client_groups_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: ClientGroup;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientgroup.put_api_v1_client_groups_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/client_groups/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_client_groups_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientgroup.delete_api_v1_client_groups_id', Config>;
    };
    clientregistry: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/clients_registry/all
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_clients_registry_all<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.get_api_v1_clients_registry_all', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/clients_registry/abstract
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_clients_registry_abstract<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.get_api_v1_clients_registry_abstract', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/clients_registry/abstract
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   internalId?: number
       *   id?: string | null
       *   createdTime?: string
       *   updatedTime?: string
       *   groupId?: number
       *   clients?: Array<{
       *     cuid?: string
       *     id?: string | null
       *     registerTime?: string
       *     policyVersion?: number
       *     timeLayoutVersion?: number
       *     subjectsVersion?: number
       *     defaultSettingsVersion?: number
       *     classPlanVersion?: number
       *     objectUpdates?: Array<{
       *       id?: number
       *       objectId?: string
       *       objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *       targetCuid?: string
       *       updateTime?: string
       *     }> | null
       *     createdTime?: string
       *     updatedTime?: string
       *     abstractClient?: AbstractClient
       *   }> | null
       *   group?: ClientGroup
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_clients_registry_abstract<
        Config extends Alova2MethodConfig<unknown> & {
          data: AbstractClient;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.put_api_v1_clients_registry_abstract', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/clients_registry/abstract/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   internalId?: number
       *   id?: string | null
       *   createdTime?: string
       *   updatedTime?: string
       *   groupId?: number
       *   clients?: Array<{
       *     cuid?: string
       *     id?: string | null
       *     registerTime?: string
       *     policyVersion?: number
       *     timeLayoutVersion?: number
       *     subjectsVersion?: number
       *     defaultSettingsVersion?: number
       *     classPlanVersion?: number
       *     objectUpdates?: Array<{
       *       id?: number
       *       objectId?: string
       *       objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *       targetCuid?: string
       *       updateTime?: string
       *     }> | null
       *     createdTime?: string
       *     updatedTime?: string
       *     abstractClient?: AbstractClient
       *   }> | null
       *   group?: ClientGroup
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_clients_registry_abstract_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
          data: AbstractClient;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.put_api_v1_clients_registry_abstract_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/clients_registry/abstract/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_clients_registry_abstract_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.delete_api_v1_clients_registry_abstract_id', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/clients_registry/register
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   cuid?: string
       *   id?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_clients_registry_register<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            cuid?: string;
            id?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.post_api_v1_clients_registry_register', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/clients_registry/unregister
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   Cuid?: string
       *   Id?: string
       *   RegisterTime?: string
       *   PolicyVersion?: number
       *   TimeLayoutVersion?: number
       *   SubjectsVersion?: number
       *   DefaultSettingsVersion?: number
       *   ClassPlanVersion?: number
       *   ObjectUpdates?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetCuid?: string
       *     updateTime?: string
       *   }>
       *   CreatedTime?: string
       *   UpdatedTime?: string
       *   'AbstractClient.InternalId'?: number
       *   'AbstractClient.Id'?: string
       *   'AbstractClient.CreatedTime'?: string
       *   'AbstractClient.UpdatedTime'?: string
       *   'AbstractClient.GroupId'?: number
       *   'AbstractClient.Clients'?: Array<{
       *     cuid?: string
       *     id?: string | null
       *     registerTime?: string
       *     policyVersion?: number
       *     timeLayoutVersion?: number
       *     subjectsVersion?: number
       *     defaultSettingsVersion?: number
       *     classPlanVersion?: number
       *     objectUpdates?: Array<{
       *       id?: number
       *       objectId?: string
       *       objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *       targetCuid?: string
       *       updateTime?: string
       *     }> | null
       *     createdTime?: string
       *     updatedTime?: string
       *     abstractClient?: AbstractClient
       *   }>
       *   'AbstractClient.Group.Id'?: number
       *   'AbstractClient.Group.Name'?: string
       *   'AbstractClient.Group.Clients'?: Array<{
       *     internalId?: number
       *     id?: string | null
       *     createdTime?: string
       *     updatedTime?: string
       *     groupId?: number
       *     clients?: Array<{
       *       cuid?: string
       *       id?: string | null
       *       registerTime?: string
       *       policyVersion?: number
       *       timeLayoutVersion?: number
       *       subjectsVersion?: number
       *       defaultSettingsVersion?: number
       *       classPlanVersion?: number
       *       objectUpdates?: Array<{
       *         id?: number
       *         objectId?: string
       *         objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *         targetCuid?: string
       *         updateTime?: string
       *       }> | null
       *       createdTime?: string
       *       updatedTime?: string
       *       abstractClient?: AbstractClient
       *     }> | null
       *     group?: ClientGroup
       *   }>
       *   'AbstractClient.Group.ObjectsAssignees'?: Array<{
       *     id?: number
       *     objectId?: string
       *     objectType?: 0 | 1 | 2 | 3 | 4 | 5
       *     targetClientId?: string | null
       *     targetClientCuid?: string | null
       *     targetGroupId?: number | null
       *     assigneeType?: 0 | 1 | 2 | 3
       *     createdTime?: string
       *     updatedTime?: string
       *   }>
       *   'AbstractClient.Group.CreatedTime'?: string
       *   'AbstractClient.Group.UpdatedTime'?: string
       *   'AbstractClient.Group.ColorHex'?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_clients_registry_unregister<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            Cuid?: string;
            Id?: string;
            RegisterTime?: string;
            PolicyVersion?: number;
            TimeLayoutVersion?: number;
            SubjectsVersion?: number;
            DefaultSettingsVersion?: number;
            ClassPlanVersion?: number;
            ObjectUpdates?: ObjectUpdate[];
            CreatedTime?: string;
            UpdatedTime?: string;
            'AbstractClient.InternalId'?: number;
            'AbstractClient.Id'?: string;
            'AbstractClient.CreatedTime'?: string;
            'AbstractClient.UpdatedTime'?: string;
            'AbstractClient.GroupId'?: number;
            'AbstractClient.Clients'?: Client[];
            'AbstractClient.Group.Id'?: number;
            'AbstractClient.Group.Name'?: string;
            'AbstractClient.Group.Clients'?: AbstractClient[];
            'AbstractClient.Group.ObjectsAssignees'?: ObjectsAssignee[];
            'AbstractClient.Group.CreatedTime'?: string;
            'AbstractClient.Group.UpdatedTime'?: string;
            'AbstractClient.Group.ColorHex'?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.delete_api_v1_clients_registry_unregister', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/clients_registry/query/{cuid}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_clients_registry_query_cuid<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'clientregistry.get_api_v1_clients_registry_query_cuid', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/clients_registry/client_configure
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_clients_registry_client_configure<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'clientregistry.get_api_v1_clients_registry_client_configure', Config>;
    };
    manifest: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/manifest
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_manifest<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'manifest.get_api_v1_client_cuid_manifest', Config>;
    };
    objectsdelivery: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/subjects
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_subjects<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'objectsdelivery.get_api_v1_client_cuid_subjects', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/timelayouts
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_timelayouts<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'objectsdelivery.get_api_v1_client_cuid_timelayouts', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/classplans
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_classplans<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'objectsdelivery.get_api_v1_client_cuid_classplans', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/policy
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_policy<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'objectsdelivery.get_api_v1_client_cuid_policy', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/client/{cuid}/default-settings
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   cuid: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_client_cuid_default_settings<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            cuid: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'objectsdelivery.get_api_v1_client_cuid_default_settings', Config>;
    };
    policies: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/policies
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_policies<Config extends Alova2MethodConfig<unknown>>(
        config?: Config
      ): Alova2Method<unknown, 'policies.get_api_v1_policies', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/policies
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   name?: string | null
       *   isEnabled?: boolean
       *   content?: {
       *     isActive?: boolean
       *     disableProfileClassPlanEditing?: boolean
       *     disableProfileTimeLayoutEditing?: boolean
       *     disableProfileSubjectsEditing?: boolean
       *     disableProfileEditing?: boolean
       *     disableSettingsEditing?: boolean
       *     disableSplashCustomize?: boolean
       *     disableDebugMenu?: boolean
       *     allowExitManagement?: boolean
       *   }
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_policies<
        Config extends Alova2MethodConfig<unknown> & {
          data: Policy;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'policies.post_api_v1_policies', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/policies/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_policies_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'policies.get_api_v1_policies_id', Config>;
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/policies/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   name?: string | null
       *   isEnabled?: boolean
       *   content?: {
       *     isActive?: boolean
       *     disableProfileClassPlanEditing?: boolean
       *     disableProfileTimeLayoutEditing?: boolean
       *     disableProfileSubjectsEditing?: boolean
       *     disableProfileEditing?: boolean
       *     disableSettingsEditing?: boolean
       *     disableSplashCustomize?: boolean
       *     disableDebugMenu?: boolean
       *     allowExitManagement?: boolean
       *   }
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_policies_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: Policy;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'policies.post_api_v1_policies_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/policies/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_policies_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'policies.delete_api_v1_policies_id', Config>;
    };
    profiles: {
      /**
       * ---
       *
       * [POST]
       *
       * **path:** /api/v1/profiles/upload
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   replace?: boolean
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   isActive?: boolean
       *   name?: string | null
       *   timeLayouts?: Record<
       *     string,
       *     {
       *       isActive?: boolean
       *       attachedObjects?: Record<string, unknown | null> | null
       *       name?: string | null
       *       layouts?: Array<{
       *         isActive?: boolean
       *         attachedObjects?: Record<string, unknown | null> | null
       *         startSecond?: string
       *         endSecond?: string
       *         timeType?: number
       *         isHideDefault?: boolean
       *         defaultClassId?: string | null
       *       }> | null
       *     }
       *   > | null
       *   classPlans?: Record<
       *     string,
       *     {
       *       isActive?: boolean
       *       attachedObjects?: Record<string, unknown | null> | null
       *       timeLayoutId?: string | null
       *       timeRule?: {
       *         isActive?: boolean
       *         weekDay?: number
       *         weekCountDiv?: number
       *       }
       *       classes?: Array<{
       *         isActive?: boolean
       *         subjectId?: string | null
       *       }> | null
       *       name?: string | null
       *       isOverlay?: boolean
       *       overlaySourceId?: string | null
       *       overlaySetupTime?: string
       *       isEnabled?: boolean
       *       associatedGroup?: string | null
       *     }
       *   > | null
       *   subjects?: Record<
       *     string,
       *     {
       *       isActive?: boolean
       *       attachedObjects?: Record<string, unknown | null> | null
       *       name?: string | null
       *       initial?: string | null
       *       teacherName?: string | null
       *       isOutDoor?: boolean
       *     }
       *   > | null
       *   isOverlayClassPlanEnabled?: boolean
       *   overlayClassPlanId?: string | null
       *   tempClassPlanId?: string | null
       *   tempClassPlanSetupTime?: string
       *   classPlanGroups?: Record<
       *     string,
       *     {
       *       isActive?: boolean
       *       name?: string | null
       *       isGlobal?: boolean
       *     }
       *   > | null
       *   selectedClassPlanGroupId?: string | null
       *   tempClassPlanGroupId?: string | null
       *   tempClassPlanGroupExpireTime?: string
       *   isTempClassPlanGroupEnabled?: boolean
       *   tempClassPlanGroupType?: 0 | 1
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      post_api_v1_profiles_upload<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            replace?: boolean;
          };
          data: Profile;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'profiles.post_api_v1_profiles_upload', Config>;
    };
    subjects: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/profiles/subjects
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_profiles_subjects<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'subjects.get_api_v1_profiles_subjects', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/subjects
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   groupId?: string | null
       *   name?: string | null
       *   initials?: string | null
       *   isOutDoor?: boolean
       *   group?: {
       *     id?: string
       *     name?: string | null
       *     description?: string | null
       *     profileClassplans?: Array<{
       *       id?: string
       *       name?: string | null
       *       groupId?: string | null
       *       weekDay?: number
       *       weekDiv?: number
       *       timeLayoutId?: string
       *       isEnabled?: boolean
       *       group?: ProfileGroup
       *       profileClassPlanClasses?: Array<{
       *         internalId?: number
       *         index?: number
       *         parentId?: string
       *         subjectId?: string
       *         parent?: ProfileClassplan
       *         subject?: ProfileSubject
       *         attachedObjects?: Record<string, unknown | null> | null
       *         createdTime?: string
       *         updatedTime?: string
       *       }> | null
       *       timeLayout?: {
       *         id?: string
       *         name?: string | null
       *         groupId?: string | null
       *         group?: ProfileGroup
       *         profileClassPlans?: Array<ProfileClassplan> | null
       *         profileTimelayoutTimepoints?: Array<{
       *           internalId?: number
       *           parentId?: string
       *           index?: number
       *           start?: {
       *             hour?: number
       *             minute?: number
       *             second?: number
       *             millisecond?: number
       *             microsecond?: number
       *             nanosecond?: number
       *             ticks?: number
       *           }
       *           end?: TimeOnly
       *           timeType?: number
       *           defaultSubjectId?: string | null
       *           isHideDefault?: boolean
       *           parent?: ProfileTimeLayout
       *           attachedObjects?: Record<string, unknown | null> | null
       *           createdTime?: string
       *           updatedTime?: string
       *         }> | null
       *         attachedObjects?: Record<string, unknown | null> | null
       *         createdTime?: string
       *         updatedTime?: string
       *       }
       *       attachedObjects?: Record<string, unknown | null> | null
       *       createdTime?: string
       *       updatedTime?: string
       *     }> | null
       *     profileSubjects?: Array<ProfileSubject> | null
       *     profileTimelayouts?: Array<ProfileTimeLayout> | null
       *     createdTime?: string
       *     updatedTime?: string
       *   }
       *   profileClassplanClasses?: Array<ProfileClassPlanClass> | null
       *   attachedObjects?: Record<string, unknown | null> | null
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_subjects<
        Config extends Alova2MethodConfig<unknown> & {
          data: ProfileSubject;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'subjects.put_api_v1_profiles_subjects', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/subjects/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   id?: string
       *   groupId?: string | null
       *   name?: string | null
       *   initials?: string | null
       *   isOutDoor?: boolean
       *   group?: {
       *     id?: string
       *     name?: string | null
       *     description?: string | null
       *     profileClassplans?: Array<{
       *       id?: string
       *       name?: string | null
       *       groupId?: string | null
       *       weekDay?: number
       *       weekDiv?: number
       *       timeLayoutId?: string
       *       isEnabled?: boolean
       *       group?: ProfileGroup
       *       profileClassPlanClasses?: Array<{
       *         internalId?: number
       *         index?: number
       *         parentId?: string
       *         subjectId?: string
       *         parent?: ProfileClassplan
       *         subject?: ProfileSubject
       *         attachedObjects?: Record<string, unknown | null> | null
       *         createdTime?: string
       *         updatedTime?: string
       *       }> | null
       *       timeLayout?: {
       *         id?: string
       *         name?: string | null
       *         groupId?: string | null
       *         group?: ProfileGroup
       *         profileClassPlans?: Array<ProfileClassplan> | null
       *         profileTimelayoutTimepoints?: Array<{
       *           internalId?: number
       *           parentId?: string
       *           index?: number
       *           start?: {
       *             hour?: number
       *             minute?: number
       *             second?: number
       *             millisecond?: number
       *             microsecond?: number
       *             nanosecond?: number
       *             ticks?: number
       *           }
       *           end?: TimeOnly
       *           timeType?: number
       *           defaultSubjectId?: string | null
       *           isHideDefault?: boolean
       *           parent?: ProfileTimeLayout
       *           attachedObjects?: Record<string, unknown | null> | null
       *           createdTime?: string
       *           updatedTime?: string
       *         }> | null
       *         attachedObjects?: Record<string, unknown | null> | null
       *         createdTime?: string
       *         updatedTime?: string
       *       }
       *       attachedObjects?: Record<string, unknown | null> | null
       *       createdTime?: string
       *       updatedTime?: string
       *     }> | null
       *     profileSubjects?: Array<ProfileSubject> | null
       *     profileTimelayouts?: Array<ProfileTimeLayout> | null
       *     createdTime?: string
       *     updatedTime?: string
       *   }
       *   profileClassplanClasses?: Array<ProfileClassPlanClass> | null
       *   attachedObjects?: Record<string, unknown | null> | null
       *   createdTime?: string
       *   updatedTime?: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_subjects_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: ProfileSubject;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'subjects.put_api_v1_profiles_subjects_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/profiles/subjects/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_profiles_subjects_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'subjects.delete_api_v1_profiles_subjects_id', Config>;
    };
    timelayouts: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/profiles/timeLayouts
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   pageIndex?: number
       *   pageSize?: number
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_profiles_timelayouts<
        Config extends Alova2MethodConfig<unknown> & {
          params: {
            pageIndex?: number;
            pageSize?: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'timelayouts.get_api_v1_profiles_timelayouts', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/timeLayouts
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   isActive?: boolean
       *   attachedObjects?: Record<string, unknown | null> | null
       *   name?: string | null
       *   layouts?: Array<{
       *     isActive?: boolean
       *     attachedObjects?: Record<string, unknown | null> | null
       *     startSecond?: string
       *     endSecond?: string
       *     timeType?: number
       *     isHideDefault?: boolean
       *     defaultClassId?: string | null
       *   }> | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_timelayouts<
        Config extends Alova2MethodConfig<unknown> & {
          data: TimeLayout;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'timelayouts.put_api_v1_profiles_timelayouts', Config>;
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/profiles/timeLayouts/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_profiles_timelayouts_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'timelayouts.get_api_v1_profiles_timelayouts_id', Config>;
      /**
       * ---
       *
       * [PUT]
       *
       * **path:** /api/v1/profiles/timeLayouts/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   isActive?: boolean
       *   attachedObjects?: Record<string, unknown | null> | null
       *   name?: string | null
       *   layouts?: Array<{
       *     isActive?: boolean
       *     attachedObjects?: Record<string, unknown | null> | null
       *     startSecond?: string
       *     endSecond?: string
       *     timeType?: number
       *     isHideDefault?: boolean
       *     defaultClassId?: string | null
       *   }> | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      put_api_v1_profiles_timelayouts_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
          data: TimeLayout;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'timelayouts.put_api_v1_profiles_timelayouts_id', Config>;
      /**
       * ---
       *
       * [DELETE]
       *
       * **path:** /api/v1/profiles/timeLayouts/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      delete_api_v1_profiles_timelayouts_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'timelayouts.delete_api_v1_profiles_timelayouts_id', Config>;
    };
    usersinfo: {
      /**
       * ---
       *
       * [GET]
       *
       * **path:** /api/v1/users/info/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      get_api_v1_users_info_id<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'usersinfo.get_api_v1_users_info_id', Config>;
    };
  }

  var Apis: Apis;
}
