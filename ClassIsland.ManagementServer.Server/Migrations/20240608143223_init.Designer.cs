// <auto-generated />
using System;
using ClassIsland.ManagementServer.Server.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassIsland.ManagementServer.Server.Migrations
{
    [DbContext(typeof(ManagementServerContext))]
    [Migration("20240608143223_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.Client", b =>
                {
                    b.Property<string>("Cuid")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("cuid");

                    b.Property<int?>("ClassplanVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("classplan_version")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("DefaultSettingsVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("defaultSettings_version")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int?>("PolicyVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("policy_version")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("RegisterTime")
                        .HasColumnType("datetime")
                        .HasColumnName("register_time");

                    b.Property<int?>("SubjectsVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("subjects_version")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("TimeLayoutVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("timeLayout_version")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Cuid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_clients_client_groups_1");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ClientGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("GroupId")
                        .HasName("PRIMARY");

                    b.ToTable("client_groups", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ObjectUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ObjectId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("object_id");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int")
                        .HasColumnName("object_type");

                    b.Property<string>("TargetCuid")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("target_cuid");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("update_time");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TargetCuid" }, "fk_object_updates_clients_1");

                    b.HasIndex(new[] { "ObjectId" }, "fk_object_updates_settings_1");

                    b.ToTable("object_updates", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ObjectsAssignee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeType")
                        .HasColumnType("int")
                        .HasColumnName("assignee_type");

                    b.Property<string>("ObjectId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("object_id");

                    b.Property<int?>("ObjectType")
                        .HasColumnType("int")
                        .HasColumnName("object_type");

                    b.Property<string>("TargetClientCuid")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("target_client_cuid");

                    b.Property<string>("TargetClientId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("target_client_id");

                    b.Property<int?>("TargetGroupId")
                        .HasColumnType("int")
                        .HasColumnName("target_group_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TargetGroupId" }, "fk_objects_assignees_client_groups_1");

                    b.HasIndex(new[] { "TargetClientCuid" }, "fk_objects_assignees_clients_1");

                    b.HasIndex(new[] { "ObjectId" }, "fk_objects_assignees_profile_groups_1");

                    b.ToTable("objects_assignees", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.Policy", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .HasColumnType("json")
                        .HasColumnName("content");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("policies", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileClassplan", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("AttachedObjects")
                        .HasColumnType("json")
                        .HasColumnName("attached_objects");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("group_id");

                    b.Property<bool?>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("TimeLayoutId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("time_layout_id");

                    b.Property<int?>("WeekDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("week_day")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("WeekDiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("week_div")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_profile_classplans_profile_groups_1");

                    b.HasIndex(new[] { "TimeLayoutId" }, "fk_profile_classplans_profile_timelayouts_1");

                    b.ToTable("profile_classplans", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileClassplanClass", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internal_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InternalId"));

                    b.Property<string>("AttachedObjects")
                        .HasColumnType("json")
                        .HasColumnName("attached_objects");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<string>("ParentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("parent_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("subject_id");

                    b.HasKey("InternalId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "fk_profile_classplan_classes_profile_classplans_1");

                    b.HasIndex(new[] { "SubjectId" }, "fk_profile_classplan_classes_profile_subjects_1");

                    b.ToTable("profile_classplan_classes", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("profile_groups", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileSubject", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("AttachedObjects")
                        .HasColumnType("json")
                        .HasColumnName("attached_objects");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("group_id");

                    b.Property<string>("Initials")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("initials");

                    b.Property<bool?>("IsOutDoor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_out_door")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_profile_subjects_profile_groups_1");

                    b.ToTable("profile_subjects", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayout", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("AttachedObjects")
                        .HasColumnType("json")
                        .HasColumnName("attached_objects");

                    b.Property<string>("GroupId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupId" }, "fk_profile_timelayouts_profile_groups_1");

                    b.ToTable("profile_timelayouts", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayoutTimepoint", b =>
                {
                    b.Property<int>("InternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("internal_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InternalId"));

                    b.Property<string>("AttachedObjects")
                        .HasColumnType("json")
                        .HasColumnName("attached_objects");

                    b.Property<string>("DefaultSubjectId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("default_subject_id");

                    b.Property<TimeOnly?>("End")
                        .HasColumnType("time")
                        .HasColumnName("end");

                    b.Property<int?>("Index")
                        .HasColumnType("int")
                        .HasColumnName("index");

                    b.Property<bool?>("IsHideDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_hide_default");

                    b.Property<string>("ParentId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("parent_id");

                    b.Property<TimeOnly?>("Start")
                        .HasColumnType("time")
                        .HasColumnName("start");

                    b.Property<int?>("TimeType")
                        .HasColumnType("int")
                        .HasColumnName("time_type");

                    b.HasKey("InternalId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "fk_profile_timelayout_timepoint_profile_timelayouts_1");

                    b.ToTable("profile_timelayout_timepoint", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.Setting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Settings")
                        .HasColumnType("json")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.Client", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ClientGroup", "Group")
                        .WithMany("Clients")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_clients_client_groups_1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ObjectUpdate", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.Client", "TargetCu")
                        .WithMany("ObjectUpdates")
                        .HasForeignKey("TargetCuid")
                        .HasConstraintName("fk_object_updates_clients_1");

                    b.Navigation("TargetCu");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ObjectsAssignee", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.Client", "TargetClientCu")
                        .WithMany("ObjectsAssignees")
                        .HasForeignKey("TargetClientCuid")
                        .HasConstraintName("fk_objects_assignees_clients_1");

                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ClientGroup", "TargetGroup")
                        .WithMany("ObjectsAssignees")
                        .HasForeignKey("TargetGroupId")
                        .HasConstraintName("fk_objects_assignees_client_groups_1");

                    b.Navigation("TargetClientCu");

                    b.Navigation("TargetGroup");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileClassplan", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileGroup", "Group")
                        .WithMany("ProfileClassplans")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_profile_classplans_profile_groups_1");

                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayout", "TimeLayout")
                        .WithMany("ProfileClassplans")
                        .HasForeignKey("TimeLayoutId")
                        .HasConstraintName("fk_profile_classplans_profile_timelayouts_1");

                    b.Navigation("Group");

                    b.Navigation("TimeLayout");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileClassplanClass", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileClassplan", "Parent")
                        .WithMany("ProfileClassplanClasses")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_profile_classplan_classes_profile_classplans_1");

                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileSubject", "Subject")
                        .WithMany("ProfileClassplanClasses")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("fk_profile_classplan_classes_profile_subjects_1");

                    b.Navigation("Parent");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileSubject", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileGroup", "Group")
                        .WithMany("ProfileSubjects")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_profile_subjects_profile_groups_1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayout", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileGroup", "Group")
                        .WithMany("ProfileTimelayouts")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_profile_timelayouts_profile_groups_1");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayoutTimepoint", b =>
                {
                    b.HasOne("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayout", "Parent")
                        .WithMany("ProfileTimelayoutTimepoints")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_profile_timelayout_timepoint_profile_timelayouts_1");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.Client", b =>
                {
                    b.Navigation("ObjectUpdates");

                    b.Navigation("ObjectsAssignees");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ClientGroup", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ObjectsAssignees");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileClassplan", b =>
                {
                    b.Navigation("ProfileClassplanClasses");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileGroup", b =>
                {
                    b.Navigation("ProfileClassplans");

                    b.Navigation("ProfileSubjects");

                    b.Navigation("ProfileTimelayouts");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileSubject", b =>
                {
                    b.Navigation("ProfileClassplanClasses");
                });

            modelBuilder.Entity("ClassIsland.ManagementServer.Server.Entities.ProfileTimelayout", b =>
                {
                    b.Navigation("ProfileClassplans");

                    b.Navigation("ProfileTimelayoutTimepoints");
                });
#pragma warning restore 612, 618
        }
    }
}
